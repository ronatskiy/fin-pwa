/**
 * –ú–æ–¥—É–ª—å –±—é–¥–∂–µ—Ç—É - BudgetPlanner
 * –î–æ–∑–≤–æ–ª—è—î –≤—Å—Ç–∞–Ω–æ–≤–ª—é–≤–∞—Ç–∏ –ª—ñ–º—ñ—Ç–∏ –≤–∏—Ç—Ä–∞—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö —Ç–∞ —Å—Ç–µ–∂–∏—Ç–∏ –∑–∞ –ø–µ—Ä–µ–≤–∏—â–µ–Ω–Ω—è–º–∏
 */

import { useState, useEffect } from 'react';
import { getFromStorage, saveToStorage, STORAGE_KEYS } from '../../utils/storage';

interface Expense {
  id: string;
  date: string;
  amount: number;
  category: 'Food' | 'Transport' | 'Entertainment' | 'Other';
  description?: string;
}

const CATEGORIES: Record<string, string> = {
  'Food': 'üíµ –á–∂–∞',
  'Transport': 'üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
  'Entertainment': 'üéÆ –†–æ–∑–≤–∞–≥–∏',
  'Other': 'üìå –Ü–Ω—à–µ',
};

const DEFAULT_LIMITS: Record<string, number> = {
  'Food': 3000,
  'Transport': 1500,
  'Entertainment': 2000,
  'Other': 1000,
};

export function BudgetPlanner() {
  const [budgets, setBudgets] = useState<Record<string, number>>(DEFAULT_LIMITS);
  const [expenses, setExpenses] = useState<Expense[]>([]);
  const [editingCategory, setEditingCategory] = useState<string | null>(null);
  const [editValue, setEditValue] = useState('');

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±—é–¥–∂–µ—Ç—É —Ç–∞ –≤–∏—Ç—Ä–∞—Ç –ø—Ä–∏ –º–æ–Ω—Ç—É–≤–∞–Ω–Ω—ñ
  useEffect(() => {
    const loadedBudgets = getFromStorage<Record<string, number>>(
      STORAGE_KEYS.BUDGET,
      DEFAULT_LIMITS
    );
    setBudgets(loadedBudgets);

    const loadedExpenses = getFromStorage<Expense[]>(STORAGE_KEYS.EXPENSES, []);
    setExpenses(loadedExpenses);
  }, []);

  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –±—é–¥–∂–µ—Ç—É –¥–æ localStorage –ø—Ä–∏ –π–æ–≥–æ –∑–º—ñ–Ω—ñ
  useEffect(() => {
    saveToStorage(STORAGE_KEYS.BUDGET, budgets);
  }, [budgets]);

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å
  const currentMonth = new Date().toISOString().slice(0, 7);
  const currentMonthExpenses = expenses.filter(exp => exp.date.startsWith(currentMonth));

  // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∏—Ç—Ä–∞—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
  const categorySpending = currentMonthExpenses.reduce((acc, exp) => {
    acc[exp.category] = (acc[exp.category] || 0) + exp.amount;
    return acc;
  }, {} as Record<string, number>);

  // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç–∞—Ç—É—Å—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
  const getCategoryStatus = (category: string) => {
    const spent = categorySpending[category] || 0;
    const limit = budgets[category] || 0;
    const percentage = limit > 0 ? (spent / limit) * 100 : 0;
    const remaining = Math.max(0, limit - spent);

    return {
      spent,
      limit,
      remaining,
      percentage: Math.min(percentage, 100),
      isExceeded: spent > limit,
    };
  };

  // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å—Ç–∞–Ω—É
  const getStatusColor = (percentage: number, isExceeded: boolean) => {
    if (isExceeded) return 'danger';
    if (percentage >= 80) return 'warning';
    return 'default';
  };

  // –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ª—ñ–º—ñ—Ç—É
  const handleEditStart = (category: string, value: number) => {
    setEditingCategory(category);
    setEditValue(value.toString());
  };

  const handleEditSave = (category: string) => {
    const newValue = parseFloat(editValue);
    if (newValue > 0) {
      setBudgets({ ...budgets, [category]: newValue });
    }
    setEditingCategory(null);
    setEditValue('');
  };

  const handleEditCancel = () => {
    setEditingCategory(null);
    setEditValue('');
  };

  // –°–∫–∏–¥–∞–Ω–Ω—è –≤—Å—ñ—Ö –±—é–¥–∂–µ—Ç—ñ–≤ –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö
  const handleResetBudgets = () => {
    if (confirm('–°–∫–∏–Ω—É—Ç–∏ –≤—Å—ñ –±—é–¥–∂–µ—Ç–∏ –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å?')) {
      setBudgets(DEFAULT_LIMITS);
    }
  };

  // –ó–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
  const totalBudget = Object.values(budgets).reduce((sum, val) => sum + val, 0);
  const totalSpent = Object.values(categorySpending).reduce((sum, val) => sum + val, 0);
  const totalRemaining = totalBudget - totalSpent;
  const totalPercentage = totalBudget > 0 ? (totalSpent / totalBudget) * 100 : 0;

  return (
    <div className="module-container budget-planner">
      <h2 className="module-title">üìä –ú—ñ–π –ë—é–¥–∂–µ—Ç</h2>

      {/* –ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å */}
      <div className="budget-overview">
        <div className="overview-header">
          <h3>–ü–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å</h3>
          <button onClick={handleResetBudgets} className="btn btn-secondary btn-sm">
            –°–∫–∏–Ω—É—Ç–∏
          </button>
        </div>

        <div className="overview-stats">
          <div className="stat-card">
            <div className="stat-label">–ë—é–¥–∂–µ—Ç</div>
            <div className="stat-value">{totalBudget.toFixed(0)} –≥—Ä–Ω</div>
          </div>
          <div className="stat-card">
            <div className="stat-label">–í–∏—Ç—Ä–∞—á–µ–Ω–æ</div>
            <div className="stat-value positive">{totalSpent.toFixed(2)} –≥—Ä–Ω</div>
          </div>
          <div className="stat-card">
            <div className="stat-label">–ó–∞–ª–∏—à–∏–ª–æ—Å—å</div>
            <div className={`stat-value ${totalRemaining >= 0 ? 'positive' : 'negative'}`}>
              {totalRemaining.toFixed(2)} –≥—Ä–Ω
            </div>
          </div>
        </div>

        <div className="overall-progress">
          <div className="progress-bar">
            <div
              className={`progress-fill ${getStatusColor(totalPercentage, totalSpent > totalBudget)}`}
              style={{ width: `${Math.min(totalPercentage, 100)}%` }}
            />
          </div>
          <div className="progress-label">
            {totalPercentage.toFixed(0)}% –≤—ñ–¥ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É
          </div>
        </div>
      </div>

      {/* –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó */}
      <div className="budget-categories">
        <h3 className="categories-title">–ü–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö</h3>

        <div className="categories-grid">
          {Object.entries(CATEGORIES).map(([categoryKey, categoryLabel]) => {
            const status = getCategoryStatus(categoryKey);
            const statusColor = getStatusColor(status.percentage, status.isExceeded);

            return (
              <div key={categoryKey} className="budget-card">
                <div className="card-header">
                  <span className="category-label">{categoryLabel}</span>
                  <span className={`status-badge ${statusColor}`}>
                    {status.isExceeded ? '‚ö†Ô∏è –ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ' : `${status.percentage.toFixed(0)}%`}
                  </span>
                </div>

                <div className="card-content">
                  <div className="budget-display">
                    {editingCategory === categoryKey ? (
                      <div className="edit-input-group">
                        <input
                          type="number"
                          min="0"
                          value={editValue}
                          onChange={(e) => setEditValue(e.target.value)}
                          className="form-input edit-input"
                          autoFocus
                        />
                        <button
                          onClick={() => handleEditSave(categoryKey)}
                          className="btn btn-sm btn-primary"
                        >
                          ‚úì
                        </button>
                        <button
                          onClick={handleEditCancel}
                          className="btn btn-sm btn-secondary"
                        >
                          ‚úï
                        </button>
                      </div>
                    ) : (
                      <div
                        className="budget-value"
                        onClick={() => handleEditStart(categoryKey, budgets[categoryKey])}
                        title="–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è"
                      >
                        <span className="limit-text">{budgets[categoryKey]} –≥—Ä–Ω</span>
                        <span className="edit-hint">‚úé</span>
                      </div>
                    )}
                  </div>

                  <div className="progress-bar">
                    <div
                      className={`progress-fill ${statusColor}`}
                      style={{ width: `${status.percentage}%` }}
                    />
                  </div>

                  <div className="spending-info">
                    <span className="spent-amount">
                      –í–∏—Ç—Ä–∞—á–µ–Ω–æ: {status.spent.toFixed(2)} –≥—Ä–Ω
                    </span>
                    <span className="remaining-amount">
                      –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {status.remaining.toFixed(2)} –≥—Ä–Ω
                    </span>
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="budget-statistics">
        <h3 className="stats-title">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>

        <div className="stats-list">
          <div className="stat-item">
            <span className="stat-item-label">–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤ –º–µ–∂–∞—Ö –±—é–¥–∂–µ—Ç—É:</span>
            <span className="stat-item-value">
              {Object.keys(CATEGORIES).filter(
                cat => !getCategoryStatus(cat).isExceeded
              ).length} / {Object.keys(CATEGORIES).length}
            </span>
          </div>

          <div className="stat-item">
            <span className="stat-item-label">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –ø–µ—Ä–µ–≤–∏—â–µ–Ω–Ω—è:</span>
            <span className="stat-item-value negative">
              {Math.max(
                ...Object.keys(CATEGORIES).map(cat => {
                  const status = getCategoryStatus(cat);
                  return status.isExceeded ? status.spent - status.limit : 0;
                }),
                0
              ).toFixed(2)} –≥—Ä–Ω
            </span>
          </div>

          <div className="stat-item">
            <span className="stat-item-label">–ï–∫–æ–Ω–æ–º–ª–µ–Ω–Ω—è:</span>
            <span className={`stat-item-value ${totalRemaining >= 0 ? 'positive' : 'negative'}`}>
              {Math.abs(totalRemaining).toFixed(2)} –≥—Ä–Ω
            </span>
          </div>
        </div>
      </div>

      {/* –ü–æ—Ä–∞–¥–∞ */}
      <div className="budget-tip">
        <p className="tip-text">
          üí° <strong>–ü–æ—Ä–∞–¥–∞:</strong> –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∑–Ω–∞—á–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç—É, —â–æ–± –π–æ–≥–æ –∑–º—ñ–Ω–∏—Ç–∏. 
          –†–µ–≥—É–ª—è—Ä–Ω–æ –ø–µ—Ä–µ–≥–ª—è–¥–∞–π—Ç–µ –≤–∏—Ç—Ä–∞—Ç–∏, —â–æ–± –∑–∞–ª–∏—à–∞—Ç–∏—Å—è –≤ –º–µ–∂–∞—Ö –±—é–¥–∂–µ—Ç—É.
        </p>
      </div>
    </div>
  );
}
