/**
 * –ú–æ–¥—É–ª—å –≤–∏—Ç—Ä–∞—Ç - ExpenseTracker
 * –î–æ–∑–≤–æ–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –¥–æ–¥–∞–≤–∞—Ç–∏, –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Ç–∞ –∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏
 */

import { useState, useEffect } from 'react';
import { getFromStorage, saveToStorage, STORAGE_KEYS } from '../../utils/storage';

interface Expense {
  id: string;
  date: string;
  amount: number;
  category: 'Food' | 'Transport' | 'Entertainment' | 'Other';
  description?: string;
}

const CATEGORIES: Record<string, string> = {
  'Food': 'üíµ –á–∂–∞',
  'Transport': 'üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
  'Entertainment': 'üéÆ –†–æ–∑–≤–∞–≥–∏',
  'Other': 'üìå –Ü–Ω—à–µ',
};

export function ExpenseTracker() {
  const [expenses, setExpenses] = useState<Expense[]>([]);
  const [newExpense, setNewExpense] = useState<Omit<Expense, 'id'>>({
    date: new Date().toISOString().split('T')[0],
    amount: 0,
    category: 'Food',
  });
  const [selectedMonth, setSelectedMonth] = useState<string>(
    new Date().toISOString().slice(0, 7)
  );

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç –ø—Ä–∏ –º–æ–Ω—Ç—É–≤–∞–Ω–Ω—ñ
  useEffect(() => {
    const loaded = getFromStorage<Expense[]>(STORAGE_KEYS.EXPENSES, []);
    setExpenses(loaded);
  }, []);

  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç –¥–æ localStorage –ø—Ä–∏ —ó—Ö –∑–º—ñ–Ω—ñ
  useEffect(() => {
    saveToStorage(STORAGE_KEYS.EXPENSES, expenses);
  }, [expenses]);

  // –§—ñ–ª—å—Ç—Ä—É–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç –ø–æ –≤–∏–±—Ä–∞–Ω–æ–º—É –º—ñ—Å—è—Ü—é
  const filteredExpenses = expenses.filter(exp =>
    exp.date.startsWith(selectedMonth)
  );

  // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å—É–º–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º
  const categoryTotals = filteredExpenses.reduce((acc, exp) => {
    acc[exp.category] = (acc[exp.category] || 0) + exp.amount;
    return acc;
  }, {} as Record<string, number>);

  // –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –∑–∞ –º—ñ—Å—è—Ü—å
  const monthTotal = filteredExpenses.reduce((sum, exp) => sum + exp.amount, 0);

  // –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –≤–∏—Ç—Ä–∞—Ç–∏
  const handleAddExpense = (e: React.FormEvent) => {
    e.preventDefault();

    if (newExpense.amount <= 0) {
      alert('–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É');
      return;
    }

    const expense: Expense = {
      id: Date.now().toString(),
      date: newExpense.date,
      amount: newExpense.amount,
      category: newExpense.category,
      description: newExpense.description,
    };

    setExpenses([...expenses, expense]);
    setNewExpense({
      date: new Date().toISOString().split('T')[0],
      amount: 0,
      category: 'Food',
    });
  };

  // –í–∏–¥–∞–ª–µ–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏
  const handleDeleteExpense = (id: string) => {
    if (confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü—é –≤–∏—Ç—Ä–∞—Ç—É?')) {
      setExpenses(expenses.filter(exp => exp.id !== id));
    }
  };

  // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
  const formatDate = (dateStr: string) => {
    const date = new Date(dateStr + 'T00:00:00');
    return new Intl.DateTimeFormat('uk-UA', {
      day: 'numeric',
      month: 'short',
      year: 'numeric',
    }).format(date);
  };

  // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –º—ñ—Å—è—Ü—è-—Ä–æ–∫—É –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
  const formatMonthYear = (monthStr: string) => {
    const [year, month] = monthStr.split('-');
    const date = new Date(parseInt(year), parseInt(month) - 1);
    return new Intl.DateTimeFormat('uk-UA', {
      month: 'long',
      year: 'numeric',
    }).format(date);
  };

  return (
    <div className="module-container expense-tracker">
      <h2 className="module-title">üìã –í–∏—Ç—Ä–∞—Ç–∏ –∑–∞ –º—ñ—Å—è—Ü—å</h2>

      {/* –§–æ—Ä–º–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏ */}
      <form onSubmit={handleAddExpense} className="expense-form">
        <div className="form-row">
          <div className="form-group">
            <label className="form-label">–î–∞—Ç–∞</label>
            <input
              type="date"
              value={newExpense.date}
              onChange={(e) =>
                setNewExpense({ ...newExpense, date: e.target.value })
              }
              className="form-input"
            />
          </div>

          <div className="form-group">
            <label className="form-label">–°—É–º–∞ (–≥—Ä–Ω)</label>
            <input
              type="number"
              step="0.01"
              min="0"
              value={newExpense.amount || ''}
              onChange={(e) =>
                setNewExpense({ ...newExpense, amount: parseFloat(e.target.value) || 0 })
              }
              placeholder="0"
              className="form-input"
            />
          </div>
        </div>

        <div className="form-row">
          <div className="form-group">
            <label className="form-label">–ö–∞—Ç–µ–≥–æ—Ä—ñ—è</label>
            <select
              value={newExpense.category}
              onChange={(e) =>
                setNewExpense({
                  ...newExpense,
                  category: e.target.value as Expense['category'],
                })
              }
              className="form-select"
            >
              {Object.entries(CATEGORIES).map(([key, label]) => (
                <option key={key} value={key}>
                  {label}
                </option>
              ))}
            </select>
          </div>

          <div className="form-group">
            <label className="form-label">–û–ø–∏—Å (–æ–ø—Ü.)</label>
            <input
              type="text"
              value={newExpense.description || ''}
              onChange={(e) =>
                setNewExpense({ ...newExpense, description: e.target.value })
              }
              placeholder="–î–µ—Ç–∞–ª—ñ..."
              className="form-input"
              maxLength={50}
            />
          </div>
        </div>

        <button type="submit" className="btn btn-primary btn-block">
          + –î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É
        </button>
      </form>

      {/* –í–∏–±—ñ—Ä –º—ñ—Å—è—Ü—è */}
      <div className="month-selector">
        <label className="form-label">–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º—ñ—Å—è—Ü—å</label>
        <input
          type="month"
          value={selectedMonth}
          onChange={(e) => setSelectedMonth(e.target.value)}
          className="form-input"
        />
      </div>

      {/* –ü—ñ–¥—Å—É–º–æ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö */}
      <div className="expense-summary">
        <h3 className="summary-title">
          {formatMonthYear(selectedMonth)}
        </h3>

        {filteredExpenses.length === 0 ? (
          <div className="empty-state">
            <div className="empty-state-icon">üì≠</div>
            <p className="empty-state-text">–í–∏—Ç—Ä–∞—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</p>
          </div>
        ) : (
          <>
            <div className="category-breakdown">
              {Object.entries(CATEGORIES).map(([category, label]) => {
                const total = categoryTotals[category] || 0;
                if (total === 0) return null;

                const percentage = Math.round((total / monthTotal) * 100);

                return (
                  <div key={category} className="category-item">
                    <div className="category-header">
                      <span className="category-name">{label}</span>
                      <span className="category-amount">
                        {total.toFixed(2)} –≥—Ä–Ω
                      </span>
                    </div>
                    <div className="progress-bar">
                      <div
                        className="progress-fill"
                        style={{ width: `${percentage}%` }}
                      />
                    </div>
                    <div className="category-percent">{percentage}%</div>
                  </div>
                );
              })}
            </div>

            {/* –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ */}
            <div className="month-total">
              <span>–í—Å—å–æ–≥–æ –∑–∞ –º—ñ—Å—è—Ü—å:</span>
              <span className="total-amount">{monthTotal.toFixed(2)} –≥—Ä–Ω</span>
            </div>

            {/* –°–ø–∏—Å–æ–∫ –≤–∏—Ç—Ä–∞—Ç */}
            <div className="expenses-list">
              <h4 className="list-title">–î–µ—Ç–∞–ª—ñ –≤–∏—Ç—Ä–∞—Ç</h4>
              <div className="table-container">
                <table className="expenses-table">
                  <thead>
                    <tr>
                      <th>–î–∞—Ç–∞</th>
                      <th>–ö–∞—Ç–µ–≥–æ—Ä—ñ—è</th>
                      <th>–°—É–º–∞</th>
                      <th>–û–ø–∏—Å</th>
                      <th>–î—ñ—è</th>
                    </tr>
                  </thead>
                  <tbody>
                    {filteredExpenses
                      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
                      .map((expense) => (
                        <tr key={expense.id}>
                          <td>{formatDate(expense.date)}</td>
                          <td>{CATEGORIES[expense.category]}</td>
                          <td className="amount-cell">
                            {expense.amount.toFixed(2)} –≥—Ä–Ω
                          </td>
                          <td className="description-cell">
                            {expense.description || '‚Äî'}
                          </td>
                          <td className="action-cell">
                            <button
                              onClick={() => handleDeleteExpense(expense.id)}
                              className="btn-delete"
                              title="–í–∏–¥–∞–ª–∏—Ç–∏"
                            >
                              ‚úï
                            </button>
                          </td>
                        </tr>
                      ))}
                  </tbody>
                </table>
              </div>
            </div>
          </>
        )}
      </div>
    </div>
  );
}
